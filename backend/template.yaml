AWSTemplateFormatVersion: 2010-09-09
Description: >-
  backend

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  DatabaseUsername:
    NoEcho: 'true'
    Description: Username for Postgres database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DatabasePassword:
    NoEcho: 'true'
    Description: Password for Postgres database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
  DatabaseDatabase:
    NoEcho: 'true'
    Description: Database to use from the Postgres database instance
    Type: String

Resources:
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ApiGateway
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "${request.body.action}"
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectIntegration
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectIntegration
  UserCreateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: users-create
      AuthorizationType: NONE
      OperationName: UserCreateRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref UserCreateIntegration
  UserLoginRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: users-login
      AuthorizationType: NONE
      OperationName: UserLoginRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref UserLoginIntegration
  UserLogoutRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: users-logout
      AuthorizationType: NONE
      OperationName: UserLogoutRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref UserLogoutIntegration
  ProjectsGetAllRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: projects-get-all
      AuthorizationType: NONE
      OperationName: ProjectsGetAllRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ProjectsGetAllIntegration
  ProjectsGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: projects-get
      AuthorizationType: NONE
      OperationName: ProjectsGetIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ProjectsGetIntegration
  ProjectsCreateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: projects-create
      AuthorizationType: NONE
      OperationName: ProjectsCreateIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ProjectsCreateIntegration
  DataGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: data-get
      AuthorizationType: NONE
      OperationName: DataGetIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DataGetIntegration
  DataCreateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: data-create
      AuthorizationType: NONE
      OperationName: DataCreateIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DataCreateIntegration
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - ConnectionsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionsFunction.Arn}/invocations
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - ConnectionsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionsFunction.Arn}/invocations
  UserCreateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - UsersFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: User create Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations
  UserLoginIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - UsersFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: User login Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations
  UserLogoutIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - UsersFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: User logout Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations
  ProjectsGetAllIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - ProjectsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Projects fetch all Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations
  ProjectsGetIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - ProjectsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Projects fetch Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations
  ProjectsCreateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - ProjectsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Projects create Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations
  DataGetIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - DataFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Data fetch Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DataFunction.Arn}/invocations
  DataCreateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: 
      - DataFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Data create Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DataFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - UserCreateRoute
      - UserLoginRoute
      - UserLogoutRoute
      - ProjectsGetAllIntegration
      - ProjectsGetIntegration
      - ProjectsCreateIntegration
      - DataGetIntegration
      - DataCreateIntegration
    Properties:
      ApiId: !Ref ApiGateway
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Production
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref ApiGateway

  ConnectionsFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - Redis
      - Database
    Properties:
      CodeUri: packages/connections/
      Handler: main.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: Handles connections
      VpcConfig:
        SubnetIds:
          - subnet-05131fc6f978ebc6a
          - subnet-0764d147586f6927e
        SecurityGroupIds:
          - sg-00fe3732c89fa040e
      Environment:
        Variables:
          REDIS_HOST: !GetAtt Redis.RedisEndpoint.Address
          REDIS_PORT: !GetAtt Redis.RedisEndpoint.Port
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - main.ts
  ConnectionsFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionsFunction
      Principal: apigateway.amazonaws.com

  UsersFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - Redis
      - Database
    Properties:
      CodeUri: packages/users/
      Handler: main.lambda_handler
      Runtime: python3.11
      Architectures:
        - arm64
      MemorySize: 256
      Timeout: 100
      Description: Handles users
      VpcConfig:
        SubnetIds:
          - subnet-05131fc6f978ebc6a
          - subnet-0764d147586f6927e
        SecurityGroupIds:
          - sg-00fe3732c89fa040e
      Environment:
        Variables:
          REDIS_HOST: !GetAtt Redis.RedisEndpoint.Address
          REDIS_PORT: !GetAtt Redis.RedisEndpoint.Port
          DATABASE_HOST: !GetAtt Database.Endpoint.Address
          DATABASE_PORT: !GetAtt Database.Endpoint.Port
          DATABASE_DATABASE: !Ref DatabaseDatabase
          DATABASE_USERNAME: !Ref DatabaseUsername
          DATABASE_PASSWORD: !Ref DatabasePassword
  UsersFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UsersFunction
      Principal: apigateway.amazonaws.com

  ProjectsFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - Redis
      - Database
    Properties:
      CodeUri: packages/projects/
      Handler: main.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      MemorySize: 256
      Timeout: 100
      Description: Handles projects
      VpcConfig:
        SubnetIds:
          - subnet-05131fc6f978ebc6a
          - subnet-0764d147586f6927e
        SecurityGroupIds:
          - sg-00fe3732c89fa040e
      Environment:
        Variables:
          REDIS_HOST: !GetAtt Redis.RedisEndpoint.Address
          REDIS_PORT: !GetAtt Redis.RedisEndpoint.Port
          DATABASE_HOST: !GetAtt Database.Endpoint.Address
          DATABASE_PORT: !GetAtt Database.Endpoint.Port
          DATABASE_DATABASE: !Ref DatabaseDatabase
          DATABASE_USERNAME: !Ref DatabaseUsername
          DATABASE_PASSWORD: !Ref DatabasePassword
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - main.ts
  ProjectsFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProjectsFunction
      Principal: apigateway.amazonaws.com

  DataFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - Redis
      - Database
    Properties:
      CodeUri: packages/data/
      Handler: main.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      MemorySize: 512
      Timeout: 100
      Description: Handles data
      VpcConfig:
        SubnetIds:
          - subnet-05131fc6f978ebc6a
          - subnet-0764d147586f6927e
        SecurityGroupIds:
          - sg-00fe3732c89fa040e
      Environment:
        Variables:
          REDIS_HOST: !GetAtt Redis.RedisEndpoint.Address
          REDIS_PORT: !GetAtt Redis.RedisEndpoint.Port
          DATABASE_HOST: !GetAtt Database.Endpoint.Address
          DATABASE_PORT: !GetAtt Database.Endpoint.Port
          DATABASE_DATABASE: !Ref DatabaseDatabase
          DATABASE_USERNAME: !Ref DatabaseUsername
          DATABASE_PASSWORD: !Ref DatabasePassword
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - main.ts
  DataFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DataFunction
      Principal: apigateway.amazonaws.com


  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: PCD Database subnet group
      SubnetIds: 
        - subnet-05131fc6f978ebc6a
        - subnet-0764d147586f6927e
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PCD Database security group
      VpcId: vpc-03d6424bee6aa6c85
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: sg-00fe3732c89fa040e
  Database:
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - DatabaseSubnetGroup
      - DatabaseSecurityGroup
    Properties:
      DBInstanceIdentifier: PCD-homework-2
      DBName: PCDHomework2
      DBInstanceClass: db.t3.micro
      AllocatedStorage: "20"
      Engine: postgres
      EngineVersion: "16.1"
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !GetAtt 
          - DatabaseSecurityGroup
          - GroupId

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: PCD Redis subnet group
      SubnetIds: 
        - subnet-05131fc6f978ebc6a
        - subnet-0764d147586f6927e
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PCD Redis security group
      VpcId: vpc-03d6424bee6aa6c85
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: sg-00fe3732c89fa040e
  Redis:
    Type: AWS::ElastiCache::CacheCluster
    DependsOn: 
      - RedisSubnetGroup
      - RedisSecurityGroup
    Properties:
      Engine: redis
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt 
          - RedisSecurityGroup
          - GroupId

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL"
    Value:
      !Join [
        "",
        [
          "wss://",
          !Ref ApiGateway,
          ".execute-api.",
          !Ref "AWS::Region",
          ".amazonaws.com/",
          !Ref "Stage",
        ],
      ]
