AWSTemplateFormatVersion: 2010-09-09
Description: >-
  backend-compute

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  VpcId:
    NoEcho: "false"
    Description: ID of the VPC to use
    Type: String
  VpcSubnetId1:
    NoEcho: "false"
    Description: ID of the VPC subnet 1 to use
    Type: String
  VpcSubnetId2:
    NoEcho: "false"
    Description: ID of the VPC subnet 2 to use
    Type: String
  VpcSecurityGroupId:
    NoEcho: "false"
    Description: ID of the VPC security group to use
    Type: String

  RedisHost:
    NoEcho: 'true'
    Description: Redis Host
    Type: String
  RedisPort:
    NoEcho: 'true'
    Description: Redis Port
    Type: String
  DatabaseHost:
    NoEcho: 'true'
    Description: Database Host
    Type: String
  DatabasePort:
    NoEcho: 'true'
    Description: Database Port
    Type: String
  DatabaseDatabase:
    NoEcho: 'true'
    Description: Database Database
    Type: String
  DatabaseUsername:
    NoEcho: 'true'
    Description: Database Username
    Type: String
  DatabasePassword:
    NoEcho: 'true'
    Description: Database Password
    Type: String

Resources:
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ApiGateway
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "${request.body.action}"

  # DefaultRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref ApiGateway
  #     RouteKey: $default
  #     AuthorizationType: NONE
  #     OperationName: DefaultRoute
  #     Target: !Join
  #       - "/"
  #       - - "integrations"
  #         - !Ref ConnectIntegration
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectIntegration
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectIntegration
  UserCreateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: users-create
      AuthorizationType: NONE
      OperationName: UserCreateRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref UserCreateIntegration
  UserLoginRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: users-login
      AuthorizationType: NONE
      OperationName: UserLoginRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref UserLoginIntegration
  UserLogoutRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: users-logout
      AuthorizationType: NONE
      OperationName: UserLogoutRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref UserLogoutIntegration
  ProjectsGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: projects-get
      AuthorizationType: NONE
      OperationName: ProjectsGetIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ProjectsGetIntegration
  ProjectsGetAllRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: projects-get-all
      AuthorizationType: NONE
      OperationName: ProjectsGetAllRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ProjectsGetAllIntegration
  ProjectsCreateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: projects-create
      AuthorizationType: NONE
      OperationName: ProjectsCreateIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ProjectsCreateIntegration
  VisualisationsGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: visualisations-get
      AuthorizationType: NONE
      OperationName: VisualisationsGetIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref VisualisationsGetIntegration
  VisualisationsGetAllRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: visualisations-get-all
      AuthorizationType: NONE
      OperationName: VisualisationsGetAllRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref VisualisationsGetAllIntegration
  VisualisationsCreateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: visualisations-create
      AuthorizationType: NONE
      OperationName: VisualisationsCreateIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref VisualisationsCreateIntegration
  DataGetAllRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: data-get-all
      AuthorizationType: NONE
      OperationName: DataGetAllIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DataGetAllIntegration
  DataCreateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: data-create
      AuthorizationType: NONE
      OperationName: DataCreateIntegration
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DataCreateIntegration
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ConnectionsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionsFunction.Arn}/invocations
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ConnectionsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionsFunction.Arn}/invocations
  UserCreateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - UsersFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: User create Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations
  UserLoginIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - UsersFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: User login Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations
  UserLogoutIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - UsersFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: User logout Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations
  ProjectsGetIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ProjectsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Projects fetch Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations
  ProjectsGetAllIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ProjectsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Projects fetch all Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations
  ProjectsCreateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ProjectsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Projects create Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations
  VisualisationsGetIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ProjectsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Visualisations fetch Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations
  VisualisationsGetAllIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ProjectsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Visualisations fetch all Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations
  VisualisationsCreateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ProjectsFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Visualisations create Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectsFunction.Arn}/invocations
  DataGetAllIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - DataFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Data fetch Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DataFunction.Arn}/invocations
  DataCreateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - DataFunction
    Properties:
      ApiId: !Ref ApiGateway
      Description: Data create Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DataFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      # - DefaultRoute
      - ConnectRoute
      - DisconnectRoute
      - UserCreateRoute
      - UserLoginRoute
      - UserLogoutRoute
      - ProjectsGetAllIntegration
      - ProjectsGetIntegration
      - ProjectsCreateIntegration
      - VisualisationsGetAllIntegration
      - VisualisationsGetIntegration
      - VisualisationsCreateIntegration
      - DataGetAllIntegration
      - DataCreateIntegration
    Properties:
      ApiId: !Ref ApiGateway
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Production
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref ApiGateway

  ConnectionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../packages/connections/
      Handler: main.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: Handles connections
      VpcConfig:
        SubnetIds:
          - !Ref VpcSubnetId1
          - !Ref VpcSubnetId2
        SecurityGroupIds:
          - !Ref VpcSecurityGroupId
      Environment:
        Variables:
          REDIS_HOST: !Ref RedisHost
          REDIS_PORT: !Ref RedisPort
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - main.ts
  ConnectionsFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionsFunction
      Principal: apigateway.amazonaws.com

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../packages/users/
      Handler: main.lambda_handler
      Runtime: python3.11
      Architectures:
        - arm64
      MemorySize: 256
      Timeout: 100
      Description: Handles users
      VpcConfig:
        SubnetIds:
          - !Ref VpcSubnetId1
          - !Ref VpcSubnetId2
        SecurityGroupIds:
          - !Ref VpcSecurityGroupId
      Environment:
        Variables:
          REDIS_HOST: !Ref RedisHost
          REDIS_PORT: !Ref RedisPort
          DATABASE_HOST: !Ref DatabaseHost
          DATABASE_PORT: !Ref DatabasePort
          DATABASE_DATABASE: !Ref DatabaseDatabase
          DATABASE_USERNAME: !Ref DatabaseUsername
          DATABASE_PASSWORD: !Ref DatabasePassword
  UsersFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UsersFunction
      Principal: apigateway.amazonaws.com

  ProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../packages/projects/
      Handler: main.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      MemorySize: 256
      Timeout: 100
      Description: Handles projects
      VpcConfig:
        SubnetIds:
          - !Ref VpcSubnetId1
          - !Ref VpcSubnetId2
        SecurityGroupIds:
          - !Ref VpcSecurityGroupId
      Environment:
        Variables:
          REDIS_HOST: !Ref RedisHost
          REDIS_PORT: !Ref RedisPort
          DATABASE_HOST: !Ref DatabaseHost
          DATABASE_PORT: !Ref DatabasePort
          DATABASE_DATABASE: !Ref DatabaseDatabase
          DATABASE_USERNAME: !Ref DatabaseUsername
          DATABASE_PASSWORD: !Ref DatabasePassword
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - main.ts
  ProjectsFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProjectsFunction
      Principal: apigateway.amazonaws.com

  DataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../packages/data/
      Handler: main.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      MemorySize: 512
      Timeout: 100
      Description: Handles data
      VpcConfig:
        SubnetIds:
          - !Ref VpcSubnetId1
          - !Ref VpcSubnetId2
        SecurityGroupIds:
          - !Ref VpcSecurityGroupId
      Environment:
        Variables:
          REDIS_HOST: !Ref RedisHost
          REDIS_PORT: !Ref RedisPort
          DATABASE_HOST: !Ref DatabaseHost
          DATABASE_PORT: !Ref DatabasePort
          DATABASE_DATABASE: !Ref DatabaseDatabase
          DATABASE_USERNAME: !Ref DatabaseUsername
          DATABASE_PASSWORD: !Ref DatabasePassword
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - main.ts
  DataFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DataFunction
      Principal: apigateway.amazonaws.com

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL"
    Value:
      !Join [
        "",
        [
          "wss://",
          !Ref ApiGateway,
          ".execute-api.",
          !Ref "AWS::Region",
          ".amazonaws.com/",
          !Ref "Stage",
        ],
      ]
